#
# Modification in Curious-r/OpenWrtBuildWorkflows: 
# Copyright (c) 2022 Curious <https://www.curious.host>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
# 
# https://github.com/Curious-r/OpenWrtBuildWorkflows
# Description: Automatically check OpenWrt source code
# update and build it. Removed additional token require-
# ments.
#
#-------------------------------------------------------
# Upstream source code:
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

# Workflow name which is showed in GitHub Actions.
name: Build Example-Firmware for Example-Device

on:
  workflow_dispatch:
    inputs:
      force-build:
        description: "Build new firmware anyway"
        required: false
        default: "false"
      ssh:
        description: "SSH connection to Actions"
        required: false
        default: "false"
#  schedule:
#    - cron: 0 */18 * * *

env:
  # REPO means the OpenWrt repo you want to build from in this workflow. 
  # You can modify the REPO_NAME to any name you want, but remember not to let it 
  # have the same name in other workflows.
  REPO_NAME: example-name
  REPO_URL: https://github.com/example/example
  REPO_BRANCH: master
  # FEEDS_CONF and CONFIG_FILE is the name of your own config files for compiling,
  # you should upload these files into the root directory of your workflow repo.
  FEEDS_CONF: example-feeds.conf.default
  CONFIG_FILE: example.config
  # DIY_P1_SH is the name of extra bash script you want to execute before feeds 
  # update&install and DIY_P2_SH is the one after feeds update&install. You can 
  # modify the initial settings of your firmware through these two scripts. If 
  # this is what you need, please upload your scripts to the root directory of 
  # your workflow repo.
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  # The following determines whether to upload the compiled products.
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  # The following is the option of where the firmware needs to be transfered. 
  # To enable the corresponding target, you need to change false to true.
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: false
  # Please change the following to your time zone.
  TZ: Asia/Shanghai

jobs:
  check:
    name: Check for source code updates
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cacheHash.outputs.cache-hit }}

    steps:
      - name: Get Commit Hash
        id: getHash
        run: |
          git clone --depth 1 $REPO_URL -b $REPO_BRANCH .
          echo "::set-output name=commitHash::$(git rev-parse HEAD)"

      - name: Compare Commit Hash
        id: cacheHash
        uses: actions/cache@v3
        with:
          path: $REPO_NAME.commitHash
          key: HEAD-${{ steps.getHash.outputs.commitHash }}

      - name: Save New Commit Hash
        if: steps.cacheHash.outputs.cache-hit != 'true'
        run: |
          echo ${{ steps.getHash.outputs.commitHash }} | tee $REPO_NAME.commitHash

  build:
    name: Build firmware
    runs-on: ubuntu-20.04
    needs: check
    permissions:
      contents: write
    if: needs.check.outputs.cache-hit != 'true' || github.event.inputs.force-build == 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir

      - name: Clone source code
        working-directory: /workdir
        run: |
          df -hT $PWD
          git clone $REPO_URL -b $REPO_BRANCH openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

      - name: Load custom feeds
        run: |
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
          chmod +x $DIY_P1_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P1_SH

      - name: Update feeds
        run: cd openwrt && ./scripts/feeds update -a

      - name: Install feeds
        run: cd openwrt && ./scripts/feeds install -a

      - name: Load custom configuration
        run: |
          [ -e files ] && mv files openwrt/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
          chmod +x $DIY_P2_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P2_SH

      - name: SSH connection to Actions
        uses: P3TERX/ssh2actions@v1.0.0
        if: github.event.inputs.ssh == 'true' || contains(github.event.action, 'ssh')
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

      - name: Download package
        id: package
        run: |
          cd openwrt
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile the firmware
        id: compile
        run: |
          cd openwrt
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j1 || make -j1 V=s
          echo "::set-output name=status::success"
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: Check space usage
        if: (!cancelled())
        run: df -hT

      - name: Upload bin directory
        uses: actions/upload-artifact@main
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
        with:
          name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: openwrt/bin

      - name: Organize files
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "::set-output name=status::success"

      - name: Upload firmware directory
        uses: actions/upload-artifact@main
        if: steps.organize.outputs.status == 'success' && !cancelled()
        with:
          name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

      - name: Upload firmware to cowtransfer
        id: cowtransfer
        if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
          echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
          echo "::set-output name=url::$(cat cowtransfer.log | grep https | cut -f3 -d" ")"

      - name: Upload firmware to WeTransfer
        id: wetransfer
        if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
          echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
          echo "::set-output name=url::$(cat wetransfer.log | grep https | cut -f3 -d" ")"

      - name: Generate release tag
        id: tag
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: |
          echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
          touch release.txt
          [ $UPLOAD_COWTRANSFER = true ] && echo -e "Build from $REPO_URL\nProducts transfer:\nðŸ”— [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
          [ $UPLOAD_WETRANSFER = true ] && echo -e "Build from $REPO_URL\nProducts transfer:\nðŸ”— [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
          echo "::set-output name=status::success"

      - name: Upload firmware to release
        uses: softprops/action-gh-release@v1
        if: steps.tag.outputs.status == 'success' && !cancelled()
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: ${{ env.FIRMWARE }}/*

  clean:
    name: Clean old assets
    runs-on: ubuntu-20.04
    permissions:
      actions: write
      contents: write

    steps:
      - name: Delete workflow runs
        uses: GitRML/delete-workflow-runs@main
        with:
          retain_days: 1
          keep_minimum_runs: 1

      - name: Remove old Releases
        uses: dev-drprasad/delete-older-releases@v0.1.0
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        with:
          keep_latest: 3
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
